@model InstantItemFilterModel
@{
    var includeClosedChecked = Model.IncludeClosedItems ? "checked=\"checked\"" : string.Empty;
    var groupDependenciesChecked = Model.GroupDependencies ? "checked=\"checked\"" : string.Empty;
    var groupDependenciesOpenChecked = Model.GroupDependenciesOpen ? "checked=\"checked\"" : string.Empty;
    var showSequenceChecked = Model.ShowSequenced ? "checked=\"checked\"" : string.Empty;
    var showSequenceOpenChecked = Model.SequencedOpen ? "checked=\"checked\"" : string.Empty;
    var showSlaChecked = Model.ShowSLA ? "checked=\"checked\"" : string.Empty;
    var hideZoneChecked = !Model.ShowSLA && !Model.ShowSequenced ? "checked=\"checked\"" : string.Empty;
}
<div id="instant-filter-options" data-field-name="@Model.Options" data-field-desc="@Model.Options" 
     class="left">
    <div class="instant-filter-box" style="height: 30px;">
        <div class="instant-filter-header left">
            <span class="instant-filter-title left">@(Model.Options)</span>

            <span class="instant-filter-caption left">@(Model.SelectedCaption)</span>

        </div>
        <i class="fad fa-caret-down fa-2x"></i>

    </div>
    <div id="filter-options-content" class="dropdown-content" style="margin-top: 1px;" data-field-type="custom">
        <input class="fancy" type="checkbox" id="IncludeClosedItems" name="IncludeClosedItems" @includeClosedChecked />
        @Html.LabelFor( m => m.IncludeClosedItems, GetResource( ResourceKeys.FilterIncludeClosed ), new { title = string.Concat( '+', GetResource( ResourceKeys.Closed ) ) } )<br />

        <div class="border-bottom margin-top-10 margin-bottom-15"></div>

        <input class="fancy" type="checkbox" id="GroupDependencies" name="GroupDependencies" @groupDependenciesChecked />
        @Html.LabelFor( m => m.GroupDependencies, GetResource( ResourceKeys.GroupDependencies ), new { title = GetResource( ResourceKeys.Grouped ) } )<br />

        &emsp;&emsp; <input class="fancy" type="checkbox" id="GroupDependenciesOpen" name="GroupDependenciesOpen" @groupDependenciesOpenChecked />
        @Html.LabelFor( m => m.GroupDependenciesOpen, GetResource( ResourceKeys.GroupDependenciesOpen ), new { title = GetResource( ResourceKeys.GroupedOpen ) } )<br />

        <div class="border-bottom margin-top-10 margin-bottom-15"></div>

        <input class="fancy" type="radio" id="ShowSequenced" name="Sequence" value="ShowSequenced" @showSequenceChecked />
        @Html.LabelFor( m => m.ShowSequenced, GetResource( ResourceKeys.ShowSequence ), new { title = GetResource( ResourceKeys.ShowSequence ) } )<br />

        &emsp;&emsp; <input class="fancy" type="checkbox" id="SequencedOpen" name="SequencedOpen" @showSequenceOpenChecked />
        @Html.LabelFor( m => m.SequencedOpen, GetResource( ResourceKeys.SequencedOpen ), new { title = GetResource( ResourceKeys.SequencedOpen ) } )<br />

        @if ( Model[ItemAttributeVisibility.SLA] )
        {
            <input class="fancy" type="radio" id="ShowSLA" name="Sequence" value="ShowSLA" @showSlaChecked />
            @Html.LabelFor( m => m.ShowSLA, GetResource( ResourceKeys.ShowSLA ), new { title = GetResource( ResourceKeys.ShowSLA ) } )<br />
        }

        <input class="fancy" type="radio" id="None" name="Sequence" value="None" @hideZoneChecked />
        <label for="None" title="@GetResource(ResourceKeys.NoZone)">@GetResource( ResourceKeys.NoZone )</label><br />

    </div>
</div>
